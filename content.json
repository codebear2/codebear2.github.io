{"meta":{"title":"板砖的bear","subtitle":"","description":"","author":"zhou xiong","url":"http://yoursite.com","root":"/"},"pages":[{"title":"about","date":"2020-06-20T16:23:59.000Z","updated":"2020-07-14T15:00:26.112Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"一名努力搬砖的程序🐻搬砖格言：搬砖 搬砖 越搬越专！"},{"title":"","date":"2020-06-21T07:53:07.000Z","updated":"2020-07-14T15:27:17.105Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2020-06-21T07:50:44.000Z","updated":"2020-06-21T07:52:38.240Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"函数基础","slug":"函数基础","date":"2020-07-28T01:51:07.000Z","updated":"2020-07-28T02:00:10.336Z","comments":true,"path":"2020/07/28/函数基础/","link":"","permalink":"http://yoursite.com/2020/07/28/%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/","excerpt":"","text":"函数基础回顾 例: 定义函数 以下是 max() 函数的源代码。该函数有两个参数 num1 和 num2，会返回这两个数中较大的那个数： 函数定义提供了函数的实际主体 1234567891011121314&#x2F;&#x2F; 函数返回两个数中较大的那个数 int max(int num1, int num2) &#123; &#x2F;&#x2F; 局部变量声明 int result; if (num1 &gt; num2) result &#x3D; num1; else result &#x3D; num2; return result; &#125; 函数声明：函数声明告诉编译器函数的名称、返回类型和参数 int max(int num1, int num2); 在函数声明中，参数的名称并不重要，只有参数的类型是必需的，因此下面也是有效的声明: 1int max(int, int); // 一个源文件中定义函数且在另一个文件中调用函数时，函数声明是必需的。在这种情况下，您应该在调用函数的文件顶部声明函数。 调用函数//一个源文件中定义函数且在另一个文件中调用函数时，函数声明是必需的。在这种情况下，您应该在调用函数的文件顶部声明函数。 12345678910111213141516171819202122232425262728293031323334#include &lt;iostream&gt;using namespace std; &#x2F;&#x2F; 函数声明int max(int num1, int num2); int main ()&#123; &#x2F;&#x2F; 局部变量声明 int a &#x3D; 100; int b &#x3D; 200; int ret; &#x2F;&#x2F; 调用函数来获取最大值 ret &#x3D; max(a, b); cout &lt;&lt; &quot;Max value is : &quot; &lt;&lt; ret &lt;&lt; endl; return 0;&#125; &#x2F;&#x2F; 函数返回两个数中较大的那个数int max(int num1, int num2) &#123; &#x2F;&#x2F; 局部变量声明 int result; if (num1 &gt; num2) result &#x3D; num1; else result &#x3D; num2; return result; &#125; // 结果 Max value is ：200 Lambda 函数 定义一个可以输出字符串的lambda表达式，表达式一般都是从方括号[]开始，然后结束于花括号{}，花括号里面就像定义函数那样，包含了lamdba表达式体: 123456&#x2F;&#x2F; 定义简单的lambda表达式auto basicLambda &#x3D; [] &#123; cout &lt;&lt; &quot;Hello, world!&quot; &lt;&lt; endl; &#125;;&#x2F;&#x2F; 调用basicLambda();&#x2F;&#x2F; 输出：Hello, world! 如果需要参数，那么就要像函数那样，放在圆括号里面，如果有返回值，返回类型要放在-&gt;后面，即拖尾返回类型，当然你也可以忽略返回类型，lambda会帮你自动推断出返回类型 1234567&#x2F;&#x2F; 指明返回类型auto add &#x3D; [](int a, int b) -&gt; int &#123; return a + b; &#125;;&#x2F;&#x2F; 自动推断返回类型auto multiply &#x3D; [](int a, int b) &#123; return a * b; &#125;;int sum &#x3D; add(2, 5); &#x2F;&#x2F; 输出：7int product &#x3D; multiply(2, 5); &#x2F;&#x2F; 输出：10","categories":[{"name":"c++","slug":"c","permalink":"http://yoursite.com/categories/c/"}],"tags":[{"name":"函数","slug":"函数","permalink":"http://yoursite.com/tags/%E5%87%BD%E6%95%B0/"}]},{"title":"java-方法","slug":"java-方法","date":"2020-07-23T02:11:58.000Z","updated":"2020-07-23T02:22:26.418Z","comments":true,"path":"2020/07/23/java-方法/","link":"","permalink":"http://yoursite.com/2020/07/23/java-%E6%96%B9%E6%B3%95/","excerpt":"","text":"1.0 方法 方法的使用是为了增加代码的重复利用性 方法在Java中相当于一种机制： –某个功能只需要写一遍–在使用这个功能时，只需传入相应的数据–可以完成某个特定的功能，可以重复利用 例子：a+b=c 这个功能只需写一遍123456789101112public class show_function&#123; &#x2F;&#x2F; 类体 public static void main(String[] args) &#123; show_function.sumLnt(10,20); show_function.sumLnt(99,20); show_function.sumLnt(200,901); &#125; public static void sumLnt(int a,int b)&#123; int c&#x3D; a + b; System.out.println(a + &quot; + &quot; + b &quot; &#x3D; &quot; + c); &#125;&#125; 注意： 方法内不能再写方法 类体内可以定义多个方法","categories":[{"name":"java","slug":"java","permalink":"http://yoursite.com/categories/java/"}],"tags":[{"name":"方法","slug":"方法","permalink":"http://yoursite.com/tags/%E6%96%B9%E6%B3%95/"}]},{"title":"markdown-基本语法","slug":"markdown-基本语法","date":"2020-06-21T03:33:11.000Z","updated":"2020-07-23T02:16:24.591Z","comments":true,"path":"2020/06/21/markdown-基本语法/","link":"","permalink":"http://yoursite.com/2020/06/21/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/","excerpt":"","text":"效果展示： 这是一级标题这是二级标题这是三级标题这是四级标题这是五级标题这是六级标题这是加粗的文字这是倾斜的文字 这是斜体加粗的文字这是加删除线的文字 这是引用的内容 分割线 添加图片的方法： 添加超链接：简书百度 无序列表语法： 用 - + * 任何一种都可以 列表内容 列表内容 列表内容注意：- + * 跟内容之间都要有一个空格 有序列表语法：数字加点 列表内容 列表内容 列表内容注意：序号跟内容之间要有空格 代码处理：语法：单行代码：代码之间分别用一个反引号包起来 代码内容 代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行() 代码... 代码... 代码... () 语法示例：# 这是一级标题 ## 这是二级标题 ### 这是三级标题 #### 这是四级标题 ##### 这是五级标题 ###### 这是六级标题 **这是加粗的文字** *这是倾斜的文字* ***这是斜体加粗的文字*** ~~这是加删除线的文字~~ &gt;这是引用的内容 分割线 --- ---- *** ***** 添加图片的方法： ![元素](https://s1.ax1x.com/2020/06/21/N14qQs.png) 添加超链接： [简书](http://jianshu.com) [百度](http://baidu.com) 无序列表 语法： 用 - + * 任何一种都可以 - 列表内容 + 列表内容 * 列表内容 注意：- + * 跟内容之间都要有一个空格 有序列表 语法： 数字加点 1. 列表内容 2. 列表内容 3. 列表内容 注意：序号跟内容之间要有空格 代码处理： 语法： 单行代码：代码之间分别用一个反引号包起来 `代码内容` 代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行 (```) 代码... 代码... 代码... (```)","categories":[],"tags":[]},{"title":"java-简谈构造方法","slug":"java-简谈构造方法","date":"2020-06-20T13:30:27.000Z","updated":"2020-07-14T15:27:25.659Z","comments":true,"path":"2020/06/20/java-简谈构造方法/","link":"","permalink":"http://yoursite.com/2020/06/20/java-%E7%AE%80%E8%B0%88%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/","excerpt":"构造方法的三个特点：","text":"构造方法的三个特点： 1.构造方法的名称必须与类的名称相同2.构造方法的前面没有返还类型 ： public run（）{}3.如果你没有在类中定义构造方法，那么在编译阶段，编译器会自动给出一个构造方法，也就是说，编译器会在编译阶段在字节码文件中补充添加一个构造方法，此构造方法是没有参数的。 教科书上一般定义为：构造方法是为了创建一个对象 晦涩难懂 另一种简单的的说法： 初始化对象的内部状态 就是说给对象的各个属性赋初值 范例public class test1 { public static void main(String[] args) { Student p1 =new Student(18,&quot;jack&quot;); Student p2 =new Student(19,&quot;jack&quot;); p1.printlnof(); p2.getAge(); p2.printlnof(); } } class Student{ private int age; private String name; public Student(int age,String name) { this.age=age; this.name=name; } public void printlnof() { System.out.println(&quot;age: &quot;+age+&quot; name: &quot;+name); } public void getAge() { int s=10; age+=s; } }// 所谓 构造方法就是 对类的内部进行初始化","categories":[{"name":"java","slug":"java","permalink":"http://yoursite.com/categories/java/"}],"tags":[{"name":"构造方法","slug":"构造方法","permalink":"http://yoursite.com/tags/%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-06-19T12:42:01.618Z","updated":"2020-06-21T03:33:59.986Z","comments":true,"path":"2020/06/19/hello-world/","link":"","permalink":"http://yoursite.com/2020/06/19/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"c++","slug":"c","permalink":"http://yoursite.com/categories/c/"},{"name":"java","slug":"java","permalink":"http://yoursite.com/categories/java/"}],"tags":[{"name":"函数","slug":"函数","permalink":"http://yoursite.com/tags/%E5%87%BD%E6%95%B0/"},{"name":"方法","slug":"方法","permalink":"http://yoursite.com/tags/%E6%96%B9%E6%B3%95/"},{"name":"构造方法","slug":"构造方法","permalink":"http://yoursite.com/tags/%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/"}]}