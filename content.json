{"meta":{"title":"搬砖的bear","subtitle":"","description":"","author":"zhou xiong","url":"http://yoursite.com","root":"/"},"pages":[{"title":"","date":"2020-06-21T07:53:07.000Z","updated":"2020-07-14T15:27:17.105Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2020-06-21T07:50:44.000Z","updated":"2020-06-21T07:52:38.240Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"about","date":"2020-06-20T16:23:59.000Z","updated":"2020-07-14T15:00:26.112Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"一名努力搬砖的程序🐻搬砖格言：搬砖 搬砖 越搬越专！"}],"posts":[{"title":"类型转换","slug":"类型转换","date":"2021-09-17T06:34:13.000Z","updated":"2021-09-17T06:38:51.372Z","comments":true,"path":"2021/09/17/类型转换/","link":"","permalink":"http://yoursite.com/2021/09/17/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/","excerpt":"","text":"类型转换 基本类型 byte short char int long float double 运算中，不同类型的数据先转换为同一个类型，然后再进行运算 123int i = 10；byte b = (byte)i; // 强制转换格式System.out.println(b); 注意点： 不能对布尔值进行转换 不能将高精度的数值转换成低精度的数值 转换的时候可能存在溢出，或者精度的问题 自动转换 出现在 低转高 123char a = \"a\";int d = a+1;// -&gt; d=98","categories":[{"name":"java","slug":"java","permalink":"http://yoursite.com/categories/java/"}],"tags":[{"name":"类型转换","slug":"类型转换","permalink":"http://yoursite.com/tags/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"}]},{"title":"微信小程序知识点","slug":"微信小程序知识","date":"2021-07-13T16:01:04.000Z","updated":"2021-07-13T16:14:47.445Z","comments":true,"path":"2021/07/14/微信小程序知识/","link":"","permalink":"http://yoursite.com/2021/07/14/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9F%A5%E8%AF%86/","excerpt":"","text":"微信小程序先导知识点 ==什么叫做API==link app.js、app.json、app.wxss 关键的三个文件：.js后缀的是脚本文件，.json后缀的文件是配置文件，.wxss后缀的是样式表文件。微信小程序会读取这些文件，并生成小程序实例 ==详解== app.js是小程序的脚本代码。我们可以在这个文件中监听并处理小程序的生命周期函数、声明全局变量。调用框架提供的丰富的API，如本例的同步存储及同步读取本地数据。 app.json 是对整个小程序的全局配置。我们可以在这个文件中配置小程序是由哪些页面组成，配置小程序的窗口背景色，配置导航条样式，配置默认标题。注意该文件不可添加任何注释。 app.wxss 是整个小程序的公共样式表。我们可以在页面组件的 class 属性上直接使用 app.wxss 中声明的样式规则。 ==注意== 在实例程序的代码中还有2个文件夹，一个是pages,一个是utils,其中utils是放通用工具类方法的一个文件夹，pages是存放所有页面的文件夹。 每一个小程序页面是由同路径下同名的四个不同后缀文件的组成，如：==index.js、index.wxml、index.wxss、index.json==。.js后缀的文件是脚本文件，.json后缀的文件是配置文件，.wxss后缀的是样式表文件，.wxml后缀的文件是页面结构文件。 index.wxml 是页面的结构文件：本例中使用了、、来搭建页面结构，绑定数据和交互处理函数。 12345678910&lt;!--index.wxml--&gt;&lt;view class&#x3D;&quot;container&quot;&gt; &lt;view bindtap&#x3D;&quot;bindViewTap&quot; class&#x3D;&quot;userinfo&quot;&gt; &lt;image class&#x3D;&quot;userinfo-avatar&quot; src&#x3D;&quot;&#123;&#123;userInfo.avatarUrl&#125;&#125;&quot; background-size&#x3D;&quot;cover&quot;&gt;&lt;&#x2F;image&gt; &lt;text class&#x3D;&quot;userinfo-nickname&quot;&gt;&#123;&#123;userInfo.nickName&#125;&#125;&lt;&#x2F;text&gt; &lt;&#x2F;view&gt; &lt;view class&#x3D;&quot;usermotto&quot;&gt; &lt;text class&#x3D;&quot;user-motto&quot;&gt;&#123;&#123;motto&#125;&#125;&lt;&#x2F;text&gt; &lt;&#x2F;view&gt;&lt;&#x2F;view&gt; index.js 是页面的脚本文件，在这个文件中我们可以监听并处理页面的生命周期函数、获取小程序实例，声明并处理数据，响应页面交互事件等。 12345678910111213141516171819202122232425&#x2F;&#x2F;index.js&#x2F;&#x2F;获取应用实例var app &#x3D; getApp()Page(&#123; data: &#123; motto: &#39;Hello World&#39;, userInfo: &#123;&#125; &#125;, &#x2F;&#x2F;事件处理函数 bindViewTap: function() &#123; wx.navigateTo(&#123; url: &#39;..&#x2F;logs&#x2F;logs&#39; &#125;) &#125;, onLoad: function () &#123; console.log(&#39;onLoad&#39;) var that &#x3D; this &#x2F;&#x2F;调用应用实例的方法获取全局数据 app.getUserInfo(function(userInfo)&#123; &#x2F;&#x2F;更新数据 that.setData(&#123; userInfo:userInfo &#125;) &#125;) &#125;&#125;) index.wxss 是页面的样式表： 页面的样式表是非必要的。当有页面样式表时，页面的样式表中的样式规则会层叠覆盖 app.wxss 中的样式规则。如果不指定页面的样式表，也可以在页面的结构文件中直接使用 app.wxss 中指定的样式规则。 123456789101112131415161718192021&#x2F;**index.wxss**&#x2F;.userinfo &#123; display: flex; flex-direction: column; align-items: center;&#125;.userinfo-avatar &#123; width: 128rpx; height: 128rpx; margin: 20rpx; border-radius: 50%;&#125;.userinfo-nickname &#123; color: #aaa;&#125;.usermotto &#123; margin-top: 200px;&#125; index.json 是页面的配置文件： 页面的配置文件是非必要的。当有页面的配置文件时，配置项在该页面会覆盖 app.json 的 window 中相同的配置项。如果没有指定的页面配置文件，则在该页面直接使用 app.json 中的默认配置。 logs 的页面结123456&lt;!--logs.wxml--&gt;&lt;view class&#x3D;&quot;container log-list&quot;&gt; &lt;block wx:for-items&#x3D;&quot;&#123;&#123;logs&#125;&#125;&quot; wx:for-item&#x3D;&quot;log&quot;&gt; &lt;text class&#x3D;&quot;log-item&quot;&gt;&#123;&#123;index + 1&#125;&#125;. &#123;&#123;log&#125;&#125;&lt;&#x2F;text&gt; &lt;&#x2F;block&gt;&lt;&#x2F;view&gt; ==logs 页面使用 控制标签来组织代码，在 上使用 wx:for-items 绑定 logs 数据，并将 logs 数据循环展开节点== 1234567891011121314&#x2F;&#x2F;logs.jsvar util &#x3D; require(&#39;..&#x2F;..&#x2F;utils&#x2F;util.js&#39;)Page(&#123; data: &#123; logs: [] &#125;, onLoad: function () &#123; this.setData(&#123; logs: (wx.getStorageSync(&#39;logs&#39;) || []).map(function (log) &#123; return util.formatTime(new Date(log)) &#125;) &#125;) &#125;&#125;)","categories":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://yoursite.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}],"tags":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}]},{"title":"java中的匿名函数","slug":"java中的匿名函数","date":"2021-04-11T06:07:04.000Z","updated":"2021-07-13T16:13:15.765Z","comments":true,"path":"2021/04/11/java中的匿名函数/","link":"","permalink":"http://yoursite.com/2021/04/11/java%E4%B8%AD%E7%9A%84%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/","excerpt":"","text":"匿名函数的注意点及使用 *例 简单概念 public class Demo_Anonymous { public static void main(String[] args) { Person one = new Person(); one.name = &quot;张三&quot;; one.showName(); System.out.println(&quot;=====================&quot;); new Person().name=&quot;lisa&quot;; new Person().showName(); // 匿名对象只能调用一次 第二次使用则为创新了一个新的匿名对象 } } class Person{ String name; public void showName() { System.out.println(name); } } 匿名对象作为方法的参数列表 import java.util.Scanner; public class Demo_06 { public static void main(String[] args) { // 匿名对象的方法 // int num = new Scanner(System.in).nextInt(); // // System.out.println(&quot;输出的数字： &quot;+ num); // 匿名对象 作为方法的参数列表 Anonymous_ways(new Scanner(System.in)); } public static void Anonymous_ways(Scanner sc) { int num = sc.nextInt(); System.out.println(&quot;输出的数字是： &quot; + num); } } 匿名方法作为 方法的返回值 import java.util.Scanner; public class Deom { public static void main(String[] args) { // 匿名对象作为方法的返回值 Scanner sc = methodReturn(); int num = sc.nextInt(); System.out.println(&quot;输出的数是： &quot; + num); //System.out.println(sc.nextInt()); 也可 } public static Scanner methodReturn() { return new Scanner(System.in); } }","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[{"name":"匿名函数","slug":"匿名函数","permalink":"http://yoursite.com/tags/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"}]},{"title":"java中的参数列表","slug":"关于java中的参数列表","date":"2021-04-08T06:59:35.000Z","updated":"2021-04-08T07:12:39.271Z","comments":true,"path":"2021/04/08/关于java中的参数列表/","link":"","permalink":"http://yoursite.com/2021/04/08/%E5%85%B3%E4%BA%8Ejava%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8/","excerpt":"关于Java中参数列表","text":"关于Java中参数列表 2021.4.8 public class Demo_arrylist { public static void main(String[] args) { Demo demo = new Demo(); demo.show(&quot;小米&quot;); } } class Demo{ String name= &quot;华为&quot;; public void show(String name) { System.out.println(name+ &quot; 的友商是 &quot;+ this.name ); } } 在 public void show(String name) {} 中加入参数列表 string name 相当于形参，在调用show（）方法的时候 需要赋值 在show（）方法中调用 demo类的成员变量 可以用this关键字 自己的误解： 以为参数列表只是标指 方法中运用的变量 实质上也可以看作一个对象 万物皆对象 认知不停 待更新见解…….","categories":[{"name":"java","slug":"java","permalink":"http://yoursite.com/categories/java/"}],"tags":[{"name":"参数列表","slug":"参数列表","permalink":"http://yoursite.com/tags/%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8/"}]},{"title":"函数基础","slug":"函数基础","date":"2020-07-28T01:51:07.000Z","updated":"2020-07-28T02:00:10.336Z","comments":true,"path":"2020/07/28/函数基础/","link":"","permalink":"http://yoursite.com/2020/07/28/%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/","excerpt":"","text":"函数基础回顾 例: 定义函数 以下是 max() 函数的源代码。该函数有两个参数 num1 和 num2，会返回这两个数中较大的那个数： 函数定义提供了函数的实际主体 1234567891011121314&#x2F;&#x2F; 函数返回两个数中较大的那个数 int max(int num1, int num2) &#123; &#x2F;&#x2F; 局部变量声明 int result; if (num1 &gt; num2) result &#x3D; num1; else result &#x3D; num2; return result; &#125; 函数声明：函数声明告诉编译器函数的名称、返回类型和参数 int max(int num1, int num2); 在函数声明中，参数的名称并不重要，只有参数的类型是必需的，因此下面也是有效的声明: 1int max(int, int); // 一个源文件中定义函数且在另一个文件中调用函数时，函数声明是必需的。在这种情况下，您应该在调用函数的文件顶部声明函数。 调用函数//一个源文件中定义函数且在另一个文件中调用函数时，函数声明是必需的。在这种情况下，您应该在调用函数的文件顶部声明函数。 12345678910111213141516171819202122232425262728293031323334#include &lt;iostream&gt;using namespace std; &#x2F;&#x2F; 函数声明int max(int num1, int num2); int main ()&#123; &#x2F;&#x2F; 局部变量声明 int a &#x3D; 100; int b &#x3D; 200; int ret; &#x2F;&#x2F; 调用函数来获取最大值 ret &#x3D; max(a, b); cout &lt;&lt; &quot;Max value is : &quot; &lt;&lt; ret &lt;&lt; endl; return 0;&#125; &#x2F;&#x2F; 函数返回两个数中较大的那个数int max(int num1, int num2) &#123; &#x2F;&#x2F; 局部变量声明 int result; if (num1 &gt; num2) result &#x3D; num1; else result &#x3D; num2; return result; &#125; // 结果 Max value is ：200 Lambda 函数 定义一个可以输出字符串的lambda表达式，表达式一般都是从方括号[]开始，然后结束于花括号{}，花括号里面就像定义函数那样，包含了lamdba表达式体: 123456&#x2F;&#x2F; 定义简单的lambda表达式auto basicLambda &#x3D; [] &#123; cout &lt;&lt; &quot;Hello, world!&quot; &lt;&lt; endl; &#125;;&#x2F;&#x2F; 调用basicLambda();&#x2F;&#x2F; 输出：Hello, world! 如果需要参数，那么就要像函数那样，放在圆括号里面，如果有返回值，返回类型要放在-&gt;后面，即拖尾返回类型，当然你也可以忽略返回类型，lambda会帮你自动推断出返回类型 1234567&#x2F;&#x2F; 指明返回类型auto add &#x3D; [](int a, int b) -&gt; int &#123; return a + b; &#125;;&#x2F;&#x2F; 自动推断返回类型auto multiply &#x3D; [](int a, int b) &#123; return a * b; &#125;;int sum &#x3D; add(2, 5); &#x2F;&#x2F; 输出：7int product &#x3D; multiply(2, 5); &#x2F;&#x2F; 输出：10","categories":[{"name":"c++","slug":"c","permalink":"http://yoursite.com/categories/c/"}],"tags":[{"name":"函数","slug":"函数","permalink":"http://yoursite.com/tags/%E5%87%BD%E6%95%B0/"}]},{"title":"java-方法","slug":"java-方法","date":"2020-07-23T02:11:58.000Z","updated":"2020-07-23T02:22:26.418Z","comments":true,"path":"2020/07/23/java-方法/","link":"","permalink":"http://yoursite.com/2020/07/23/java-%E6%96%B9%E6%B3%95/","excerpt":"","text":"1.0 方法 方法的使用是为了增加代码的重复利用性 方法在Java中相当于一种机制： –某个功能只需要写一遍–在使用这个功能时，只需传入相应的数据–可以完成某个特定的功能，可以重复利用 例子：a+b=c 这个功能只需写一遍123456789101112public class show_function&#123; &#x2F;&#x2F; 类体 public static void main(String[] args) &#123; show_function.sumLnt(10,20); show_function.sumLnt(99,20); show_function.sumLnt(200,901); &#125; public static void sumLnt(int a,int b)&#123; int c&#x3D; a + b; System.out.println(a + &quot; + &quot; + b &quot; &#x3D; &quot; + c); &#125;&#125; 注意： 方法内不能再写方法 类体内可以定义多个方法","categories":[{"name":"java","slug":"java","permalink":"http://yoursite.com/categories/java/"}],"tags":[{"name":"方法","slug":"方法","permalink":"http://yoursite.com/tags/%E6%96%B9%E6%B3%95/"}]},{"title":"markdown-基本语法","slug":"markdown-基本语法","date":"2020-06-21T03:33:11.000Z","updated":"2020-07-23T02:16:24.591Z","comments":true,"path":"2020/06/21/markdown-基本语法/","link":"","permalink":"http://yoursite.com/2020/06/21/markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/","excerpt":"","text":"效果展示： 这是一级标题这是二级标题这是三级标题这是四级标题这是五级标题这是六级标题这是加粗的文字这是倾斜的文字 这是斜体加粗的文字这是加删除线的文字 这是引用的内容 分割线 添加图片的方法： 添加超链接：简书百度 无序列表语法： 用 - + * 任何一种都可以 列表内容 列表内容 列表内容注意：- + * 跟内容之间都要有一个空格 有序列表语法：数字加点 列表内容 列表内容 列表内容注意：序号跟内容之间要有空格 代码处理：语法：单行代码：代码之间分别用一个反引号包起来 代码内容 代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行() 代码... 代码... 代码... () 语法示例：# 这是一级标题 ## 这是二级标题 ### 这是三级标题 #### 这是四级标题 ##### 这是五级标题 ###### 这是六级标题 **这是加粗的文字** *这是倾斜的文字* ***这是斜体加粗的文字*** ~~这是加删除线的文字~~ &gt;这是引用的内容 分割线 --- ---- *** ***** 添加图片的方法： ![元素](https://s1.ax1x.com/2020/06/21/N14qQs.png) 添加超链接： [简书](http://jianshu.com) [百度](http://baidu.com) 无序列表 语法： 用 - + * 任何一种都可以 - 列表内容 + 列表内容 * 列表内容 注意：- + * 跟内容之间都要有一个空格 有序列表 语法： 数字加点 1. 列表内容 2. 列表内容 3. 列表内容 注意：序号跟内容之间要有空格 代码处理： 语法： 单行代码：代码之间分别用一个反引号包起来 `代码内容` 代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行 (```) 代码... 代码... 代码... (```)","categories":[],"tags":[]},{"title":"java-简谈构造方法","slug":"java-简谈构造方法","date":"2020-06-20T13:30:27.000Z","updated":"2020-07-14T15:27:25.659Z","comments":true,"path":"2020/06/20/java-简谈构造方法/","link":"","permalink":"http://yoursite.com/2020/06/20/java-%E7%AE%80%E8%B0%88%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/","excerpt":"构造方法的三个特点：","text":"构造方法的三个特点： 1.构造方法的名称必须与类的名称相同2.构造方法的前面没有返还类型 ： public run（）{}3.如果你没有在类中定义构造方法，那么在编译阶段，编译器会自动给出一个构造方法，也就是说，编译器会在编译阶段在字节码文件中补充添加一个构造方法，此构造方法是没有参数的。 教科书上一般定义为：构造方法是为了创建一个对象 晦涩难懂 另一种简单的的说法： 初始化对象的内部状态 就是说给对象的各个属性赋初值 范例public class test1 { public static void main(String[] args) { Student p1 =new Student(18,&quot;jack&quot;); Student p2 =new Student(19,&quot;jack&quot;); p1.printlnof(); p2.getAge(); p2.printlnof(); } } class Student{ private int age; private String name; public Student(int age,String name) { this.age=age; this.name=name; } public void printlnof() { System.out.println(&quot;age: &quot;+age+&quot; name: &quot;+name); } public void getAge() { int s=10; age+=s; } }// 所谓 构造方法就是 对类的内部进行初始化","categories":[{"name":"java","slug":"java","permalink":"http://yoursite.com/categories/java/"}],"tags":[{"name":"构造方法","slug":"构造方法","permalink":"http://yoursite.com/tags/%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-06-19T12:42:01.618Z","updated":"2020-06-21T03:33:59.986Z","comments":true,"path":"2020/06/19/hello-world/","link":"","permalink":"http://yoursite.com/2020/06/19/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"java","slug":"java","permalink":"http://yoursite.com/categories/java/"},{"name":"微信小程序","slug":"微信小程序","permalink":"http://yoursite.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"},{"name":"c++","slug":"c","permalink":"http://yoursite.com/categories/c/"}],"tags":[{"name":"类型转换","slug":"类型转换","permalink":"http://yoursite.com/tags/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"},{"name":"微信小程序","slug":"微信小程序","permalink":"http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"匿名函数","slug":"匿名函数","permalink":"http://yoursite.com/tags/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"},{"name":"参数列表","slug":"参数列表","permalink":"http://yoursite.com/tags/%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8/"},{"name":"函数","slug":"函数","permalink":"http://yoursite.com/tags/%E5%87%BD%E6%95%B0/"},{"name":"方法","slug":"方法","permalink":"http://yoursite.com/tags/%E6%96%B9%E6%B3%95/"},{"name":"构造方法","slug":"构造方法","permalink":"http://yoursite.com/tags/%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/"}]}